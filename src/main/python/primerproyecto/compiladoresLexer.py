# Generated from /home/fabri/Escritorio/DHS/proyecto/DHS/src/main/python/primerproyecto/compiladores.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,35,209,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,1,0,1,0,1,1,1,1,1,2,1,
        2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,
        10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,16,1,
        16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,
        21,1,21,1,22,1,22,1,22,1,23,1,23,3,23,130,8,23,1,24,1,24,1,24,1,
        24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,
        27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,
        29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,
        32,1,32,1,32,1,32,1,33,1,33,3,33,180,8,33,1,33,1,33,1,33,5,33,185,
        8,33,10,33,12,33,188,9,33,1,34,4,34,191,8,34,11,34,12,34,192,1,35,
        4,35,196,8,35,11,35,12,35,197,1,35,1,35,4,35,202,8,35,11,35,12,35,
        203,1,36,1,36,1,36,1,36,0,0,37,1,0,3,0,5,1,7,2,9,3,11,4,13,5,15,
        6,17,7,19,8,21,9,23,10,25,11,27,12,29,13,31,14,33,15,35,16,37,17,
        39,18,41,19,43,20,45,21,47,22,49,23,51,24,53,25,55,26,57,27,59,28,
        61,29,63,30,65,31,67,32,69,33,71,34,73,35,1,0,3,2,0,65,90,97,122,
        1,0,48,57,3,0,9,10,13,13,32,32,214,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
        0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
        0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,
        0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,
        0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,
        0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,
        0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,
        0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,1,75,1,0,0,0,3,77,1,0,0,0,5,79,1,
        0,0,0,7,81,1,0,0,0,9,83,1,0,0,0,11,85,1,0,0,0,13,87,1,0,0,0,15,89,
        1,0,0,0,17,91,1,0,0,0,19,93,1,0,0,0,21,95,1,0,0,0,23,97,1,0,0,0,
        25,99,1,0,0,0,27,101,1,0,0,0,29,103,1,0,0,0,31,105,1,0,0,0,33,108,
        1,0,0,0,35,111,1,0,0,0,37,113,1,0,0,0,39,115,1,0,0,0,41,118,1,0,
        0,0,43,121,1,0,0,0,45,124,1,0,0,0,47,129,1,0,0,0,49,131,1,0,0,0,
        51,135,1,0,0,0,53,142,1,0,0,0,55,147,1,0,0,0,57,152,1,0,0,0,59,158,
        1,0,0,0,61,162,1,0,0,0,63,165,1,0,0,0,65,170,1,0,0,0,67,179,1,0,
        0,0,69,190,1,0,0,0,71,195,1,0,0,0,73,205,1,0,0,0,75,76,7,0,0,0,76,
        2,1,0,0,0,77,78,7,1,0,0,78,4,1,0,0,0,79,80,5,40,0,0,80,6,1,0,0,0,
        81,82,5,41,0,0,82,8,1,0,0,0,83,84,5,123,0,0,84,10,1,0,0,0,85,86,
        5,125,0,0,86,12,1,0,0,0,87,88,5,59,0,0,88,14,1,0,0,0,89,90,5,46,
        0,0,90,16,1,0,0,0,91,92,5,44,0,0,92,18,1,0,0,0,93,94,5,43,0,0,94,
        20,1,0,0,0,95,96,5,45,0,0,96,22,1,0,0,0,97,98,5,42,0,0,98,24,1,0,
        0,0,99,100,5,47,0,0,100,26,1,0,0,0,101,102,5,37,0,0,102,28,1,0,0,
        0,103,104,5,61,0,0,104,30,1,0,0,0,105,106,5,38,0,0,106,107,5,38,
        0,0,107,32,1,0,0,0,108,109,5,124,0,0,109,110,5,124,0,0,110,34,1,
        0,0,0,111,112,5,60,0,0,112,36,1,0,0,0,113,114,5,62,0,0,114,38,1,
        0,0,0,115,116,5,61,0,0,116,117,5,61,0,0,117,40,1,0,0,0,118,119,5,
        60,0,0,119,120,5,61,0,0,120,42,1,0,0,0,121,122,5,62,0,0,122,123,
        5,61,0,0,123,44,1,0,0,0,124,125,5,61,0,0,125,126,5,33,0,0,126,46,
        1,0,0,0,127,130,3,69,34,0,128,130,3,71,35,0,129,127,1,0,0,0,129,
        128,1,0,0,0,130,48,1,0,0,0,131,132,5,105,0,0,132,133,5,110,0,0,133,
        134,5,116,0,0,134,50,1,0,0,0,135,136,5,100,0,0,136,137,5,111,0,0,
        137,138,5,117,0,0,138,139,5,98,0,0,139,140,5,108,0,0,140,141,5,101,
        0,0,141,52,1,0,0,0,142,143,5,99,0,0,143,144,5,104,0,0,144,145,5,
        97,0,0,145,146,5,114,0,0,146,54,1,0,0,0,147,148,5,118,0,0,148,149,
        5,111,0,0,149,150,5,105,0,0,150,151,5,100,0,0,151,56,1,0,0,0,152,
        153,5,119,0,0,153,154,5,104,0,0,154,155,5,105,0,0,155,156,5,108,
        0,0,156,157,5,101,0,0,157,58,1,0,0,0,158,159,5,102,0,0,159,160,5,
        111,0,0,160,161,5,114,0,0,161,60,1,0,0,0,162,163,5,105,0,0,163,164,
        5,102,0,0,164,62,1,0,0,0,165,166,5,101,0,0,166,167,5,108,0,0,167,
        168,5,115,0,0,168,169,5,101,0,0,169,64,1,0,0,0,170,171,5,114,0,0,
        171,172,5,101,0,0,172,173,5,116,0,0,173,174,5,117,0,0,174,175,5,
        114,0,0,175,176,5,110,0,0,176,66,1,0,0,0,177,180,3,1,0,0,178,180,
        5,95,0,0,179,177,1,0,0,0,179,178,1,0,0,0,180,186,1,0,0,0,181,185,
        3,1,0,0,182,185,3,3,1,0,183,185,5,95,0,0,184,181,1,0,0,0,184,182,
        1,0,0,0,184,183,1,0,0,0,185,188,1,0,0,0,186,184,1,0,0,0,186,187,
        1,0,0,0,187,68,1,0,0,0,188,186,1,0,0,0,189,191,3,3,1,0,190,189,1,
        0,0,0,191,192,1,0,0,0,192,190,1,0,0,0,192,193,1,0,0,0,193,70,1,0,
        0,0,194,196,3,3,1,0,195,194,1,0,0,0,196,197,1,0,0,0,197,195,1,0,
        0,0,197,198,1,0,0,0,198,199,1,0,0,0,199,201,3,15,7,0,200,202,3,3,
        1,0,201,200,1,0,0,0,202,203,1,0,0,0,203,201,1,0,0,0,203,204,1,0,
        0,0,204,72,1,0,0,0,205,206,7,2,0,0,206,207,1,0,0,0,207,208,6,36,
        0,0,208,74,1,0,0,0,8,0,129,179,184,186,192,197,203,1,6,0,0
    ]

class compiladoresLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PA = 1
    PC = 2
    LLA = 3
    LLC = 4
    PYC = 5
    PUNTO = 6
    COMA = 7
    SUMA = 8
    RESTA = 9
    MULT = 10
    DIV = 11
    MOD = 12
    ASIG = 13
    AND = 14
    OR = 15
    MENOR = 16
    MAYOR = 17
    IGUAL = 18
    MENORIG = 19
    MAYORIG = 20
    DIF = 21
    NUMERO = 22
    INT = 23
    DOUBLE = 24
    CHAR = 25
    VOID = 26
    WHILE = 27
    FOR = 28
    IF = 29
    ELSE = 30
    RETURN = 31
    ID = 32
    ENTERO = 33
    DECIMAL = 34
    WS = 35

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'{'", "'}'", "';'", "'.'", "','", "'+'", "'-'", 
            "'*'", "'/'", "'%'", "'='", "'&&'", "'||'", "'<'", "'>'", "'=='", 
            "'<='", "'>='", "'=!'", "'int'", "'double'", "'char'", "'void'", 
            "'while'", "'for'", "'if'", "'else'", "'return'" ]

    symbolicNames = [ "<INVALID>",
            "PA", "PC", "LLA", "LLC", "PYC", "PUNTO", "COMA", "SUMA", "RESTA", 
            "MULT", "DIV", "MOD", "ASIG", "AND", "OR", "MENOR", "MAYOR", 
            "IGUAL", "MENORIG", "MAYORIG", "DIF", "NUMERO", "INT", "DOUBLE", 
            "CHAR", "VOID", "WHILE", "FOR", "IF", "ELSE", "RETURN", "ID", 
            "ENTERO", "DECIMAL", "WS" ]

    ruleNames = [ "LETRA", "DIGITO", "PA", "PC", "LLA", "LLC", "PYC", "PUNTO", 
                  "COMA", "SUMA", "RESTA", "MULT", "DIV", "MOD", "ASIG", 
                  "AND", "OR", "MENOR", "MAYOR", "IGUAL", "MENORIG", "MAYORIG", 
                  "DIF", "NUMERO", "INT", "DOUBLE", "CHAR", "VOID", "WHILE", 
                  "FOR", "IF", "ELSE", "RETURN", "ID", "ENTERO", "DECIMAL", 
                  "WS" ]

    grammarFileName = "compiladores.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


